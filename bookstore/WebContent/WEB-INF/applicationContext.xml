<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:annotation-config />
	<!-- TXモードにannotationを使用する場合
	<tx:annotation-driven />
	 -->
	<tx:annotation-driven proxy-target-class="true" />

	<!-- spring DI対象のパッケージを指定する -->
	<context:component-scan base-package="bookstore.dao.hibernate.*" />
	<context:component-scan base-package="bookstore.logic.spring.*" />

	<bean id="logger" class="bookstore.util.LogInjection" />


	<!-- TransactionManager -->
	<!-- 
	Springのトランザクション管理は大きく分けて以下の2つの管理方法が存在する。

	1.プログラミングによるトランザクション管理
	以下のようなイメージでトランザクション制御コードをソースコード内に記述する。

	transactionManager.begin();
	transactionManager.commit();
	transactionManager.rollback();

	=> springのTxManagerではcommit()やrollback()にTransactionStatusが必要となり詳細がわからない
		よって、一般的ではないと考え、springでは以下の「宣言的トランザクション管理」を使用する

	2.宣言的トランザクション管理
	「あるメソッドを呼び出したときにトランザクションをかける」と宣言する方法。
	メソッドやクラスに@Transactionalアノテーションを付与することで管理され、
	トランザクションの開始、コミット、ロールバックは自動で行われる。
	ただし、ロールバックの注意点として、
	非検査例外(RuntimeException及びそのサブクラス)が発生した場合はロールバックされるが、
	検査例外(Exception及びそのサブクラスでRuntimeExceptionのサブクラスじゃないもの)が
	発生した場合はロールバックされずコミットされる。
	 -->

	<!-- HibernateのSessionFactoryを使用してTXを制御する -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
		<qualifier value="default"/>
	</bean>
	<!-- SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="configLocation">
			<value>/WEB-INF/hibernate.cfg.xml</value>
		</property>
	</bean>

	<!-- Springが提供する仕組みでJDBCのConnectionを利用してTX制御を行う
		例えば、APサーバのDataSourceなど
			org.apache.tomcat.jdbc.pool.DataSource
			org.apache.commons.dbcp2.BasicDataSource
		単一のデータソースに対するトランザクションマネージャで、グローバルTXはサポートしない
		直接Connectionを使用するのではなく、JdbcTemplateを使用するのがおすすめ
	 -->
	<bean id="dataSource2" class="org.apache.tomcat.jdbc.pool.DataSource">
	 <!-- 
	<bean id="dataSource2" class="org.apache.commons.dbcp2.BasicDataSource">
	  -->
		<property name="driverClassName" value="org.apache.derby.jdbc.ClientDriver" />
		<property name="url" value="jdbc:derby://localhost:1527/bookstore"></property>
		<property name="username" value="bookstore"></property>
		<property name="password" value="bookstore"></property>
		<!-- defaultAutoCommitでConnection.autoCommitの値に反映されることを確認 -->
		<property name="defaultAutoCommit" value="false"></property>
	</bean>
	<bean id="transactionManager2" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref local="dataSource2"/>
		</property>
		<qualifier value="legacy"/>
	</bean>
	<bean id="jdbcTemplate2" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource2" />
	</bean>

	<!-- APサーバが提供するJTAのUserTransactionを利用してTX制御を行う -->
	<bean id="dataSource3" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName"><value>java:comp/env/jdbc/bookstoreDS</value></property>
	</bean>
	<bean id="jdbcTemplate3" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource3" />
	</bean>
	<bean id="transactionManager3" class="org.springframework.transaction.jta.JtaTransactionManager">
		<qualifier value="multi"/>
	</bean>


	<!-- DAO Interface Layer -->
	<!-- Logic層でトランザクションを開始しているのでDAOにトランザクション定義が必要か？ ⇒必要ない -->
	<!-- targetの参照先はbean定義ファイル内で完結してしないといけない。ようだ -->
	<bean id="BookDAOBId" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
		<!-- どうもlocalでもbeanでも違いはないようだ？
			<ref local="BookDAOImplBId" />
		 -->
			<ref bean="BookDAOImplBId" />
		</property>
	</bean>

	<bean id="CustomerDAOBId" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref local="CustomerDAOImplBId" />
		</property>
	</bean>

	<bean id="OrderDAOBId" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref local="OrderDAOImplBId" />
		</property>
	</bean>

	<bean id="OrderDetailDAOBId" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref local="OrderDetailDAOImplBId" />
		</property>
	</bean>

	<bean id="BookDAOBId2" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref bean="BookDAOImplBId2" />
		</property>
	</bean>

	<bean id="CustomerDAOBId2" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref local="CustomerDAOImplBId2" />
		</property>
	</bean>

	<bean id="OrderDAOBId2" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref local="OrderDAOImplBId2" />
		</property>
	</bean>

	<bean id="OrderDetailDAOBId2" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref local="OrderDetailDAOImplBId2" />
		</property>
	</bean>

	
	<!-- Logicでトランザクションを開始するので、DAOでのトランザクションは無効にする
	<bean id="BookDAOBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="target">
			<ref local="BookDAOImplBId" />
		</property>

		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="retrieve*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>

	</bean>

	<bean id="CustomerDAOBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="target">
			<ref local="CustomerDAOImplBId" />
		</property>

		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>

	</bean>

	<bean id="OrderDAOBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="target">
			<ref local="OrderDAOImplBId" />
		</property>

		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="create*">PROPAGATION_REQUIRED</prop>
				<prop key="retrieve*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>

	</bean>

	<bean id="OrderDetailDAOBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="target">
			<ref local="OrderDetailDAOImplBId" />
		</property>

		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="create*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>

	</bean>
	 -->

	<!-- DAO Implement Layer -->
	<!-- この定義を省略するとsessionFactoryをautowiredできなかった -->
	<!-- HibernateDaoSupportがHibernateTemplateを生成するためにsessionFactoryはsuperクラスのDIが必要なだけ
		ただ、HibernateDaoSupportクラスを使用しなくても、
		HibernateTemplateをnewする際にsessionFactoryを引数にすればよいだけなので、
		DAOImplクラスのHibernateDaoSupportのextendsをやめて、
		DAOImplクラスでautowiredしたsessionFactoryからHibernateDaoSupportを生成するようにすることにした。
		これにより、以下のsessionFactoryのDI定義は必要なくなった
	 -->
	<bean id="BookDAOImplBId" class="bookstore.dao.hibernate.BookDAOImpl">
		<!-- 
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
		 -->
	</bean>

	<bean id="CustomerDAOImplBId" class="bookstore.dao.hibernate.CustomerDAOImpl">
		<!-- 
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
		 -->
	</bean>

	<bean id="OrderDAOImplBId" class="bookstore.dao.hibernate.OrderDAOImpl">
		<!-- 
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
		 -->
	</bean>

	<bean id="OrderDetailDAOImplBId" class="bookstore.dao.hibernate.OrderDetailDAOImpl">
		<!-- 
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
		 -->
	</bean>

	<bean id="BookDAOImplBId2" class="bookstore.dao.jdbctemplate.BookDAOImpl">
	</bean>

	<bean id="CustomerDAOImplBId2" class="bookstore.dao.jdbctemplate.CustomerDAOImpl">
	</bean>

	<bean id="OrderDAOImplBId2" class="bookstore.dao.jdbctemplate.OrderDAOImpl">
	</bean>

	<bean id="OrderDetailDAOImplBId2" class="bookstore.dao.jdbctemplate.OrderDetailDAOImpl">
	</bean>

	<!-- Logic Interface Layer -->
	<bean id="LogicBookBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="target">
			<ref local="LogicBookImplBId" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="create*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="retrieve*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<bean id="LogicCustomerBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="target">
			<ref local="LogicCustomerImplBId" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="is*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="createCustomer">PROPAGATION_REQUIRED</prop>
				<prop key="createVCustomer">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<!-- LogicOrderImplBIdのみ、@Transactionalを使うことにしてみた -->
	<bean id="LogicOrderBId" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref local="LogicOrderImplBId" />
		</property>
	</bean>
 	<bean id="LogicOrderBId2" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
 		<!-- id=transactionManager以外のtransactionManagerを使用したい場合は明示する -->
		<property name="transactionManager">
			<ref local="transactionManager2" />
		</property>
		<property name="target">
			<ref local="LogicOrderImplBId2" />
		</property>
		<!-- TransactionProxyFactoryBeanを使用する場合は
			transactionAttributesの定義が必須。これにより@Transactionalでの定義は無効
		 -->
		<property name="transactionAttributes">
			<props>
				<prop key="orderBooks">PROPAGATION_REQUIRED</prop>
				<!-- "*"のみも使える。ただ、setter/getterも対象になってしまうのでは?? -->
				<prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>
	<!-- JtaTransactionManagerに変更しただけ -->
	<!-- 
	<bean id="LogicOrderBId3" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref local="transactionManager3" />
		</property>
		<property name="target">
			<ref local="LogicOrderImplBId3" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="orderBooks">PROPAGATION_REQUIRED</prop>
				<prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>
	 -->
	<!-- transactionManagerにデフォルト(id=transactionManager)以外を指定したい場合はどうすればいいの
		これは、複数のtransactionManagerを使い分けたい場合などに応用できる
		※実際にどのtxManagerが使用されているかはDataSourceの実装クラスで確認できると思う
			JtaTransactionManager => org.apache.openejb.resource.jdbc.managed.local.ManagedDataSource
			DataSourceTransactionManager => transactionmanager2の実装クラス
	 -->
	<bean id="LogicOrderBId3" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref local="LogicOrderImplBId3" />
		</property>
	</bean>
 
	<!-- Logic Implement Layer -->
	<!-- autowired設定によりコメントアウト化ができる部分：
		クラスに@Autowiredが指定されているのでapplicationContext.xmlでの指定は不要
	-->
	<bean id="LogicCustomerImplBId" class="bookstore.logic.spring.CustomerLogicWrapper">
	<!-- 
		<property name="customerdao">
			<ref local="CustomerDAOBId" />
		</property>
	 -->
	</bean>

	<bean id="LogicBookImplBId" class="bookstore.logic.spring.BookLogicWrapper">
	<!-- 
		<property name="bookdao">
			<ref local="BookDAOBId" />
		</property>
	 -->
	</bean>

	<bean id="LogicOrderImplBId" class="bookstore.logic.spring.OrderLogicWrapper">
	<!-- 
		<property name="bookdao">
			<ref local="BookDAOBId" />
		</property>
		<property name="customerdao">
			<ref local="CustomerDAOBId" />
		</property>
		<property name="orderdao">
			<ref local="OrderDAOBId" />
		</property>
		<property name="orderdetaildao">
			<ref local="OrderDetailDAOBId" />
		</property>
	 -->
	</bean>
	<bean id="LogicOrderImplBId2" class="bookstore.logic.spring.legacy.OrderLogicWrapper">
		<property name="bookdao">
			<ref local="BookDAOBId2" />
		</property>
		<property name="customerdao">
			<ref local="CustomerDAOBId2" />
		</property>
		<property name="orderdao">
			<ref local="OrderDAOBId2" />
		</property>
		<property name="orderdetaildao">
			<ref local="OrderDetailDAOBId2" />
		</property>
		<property name="jdbcTemplate">
			<ref local="jdbcTemplate2" />
		</property>
	</bean>
	<bean id="LogicOrderImplBId3" class="bookstore.logic.spring.multi.OrderLogicWrapper">
	</bean>

	<!-- Struts Action Layer -->
	<!-- この層ではDIをxmlファイルの定義で行う -->
	<!-- DI先は、当然Interfaceのはず -->
	<bean name="/CreateUser" class="bookstore.action.CreateUserAction">
		<property name="customerLogic">
			<ref local="LogicCustomerBId" />
		</property>
	</bean>

	<bean name="/Login" class="bookstore.action.LoginAction">
		<property name="customerLogic">
			<ref local="LogicCustomerBId" />
		</property>
		<property name="bookLogic">
			<ref local="LogicBookBId" />
		</property>
	</bean>

	<bean name="/AddToCartAction" class="bookstore.action.AddToCartAction">
		<property name="bookLogic">
			<ref local="LogicBookBId" />
		</property>
	</bean>

	<bean name="/CheckoutAction" class="bookstore.action.CheckoutAction">
		<property name="bookLogic">
			<ref local="LogicBookBId" />
		</property>
	</bean>

	<bean name="/OrderAction" class="bookstore.action.OrderAction">
		<property name="orderLogic">
			<ref local="LogicOrderBId" />
		</property>
		<property name="customerLogic">
			<ref local="LogicCustomerBId" />
		</property>
	</bean>
	<bean name="/OrderAction2" class="bookstore.action.OrderAction">
		<property name="orderLogic">
			<ref local="LogicOrderBId2" />
		</property>
		<property name="customerLogic">
			<ref local="LogicCustomerBId" />
		</property>
	</bean>
	<bean name="/OrderAction3" class="bookstore.action.OrderAction">
		<property name="orderLogic">
			<ref local="LogicOrderBId3" />
		</property>
		<property name="customerLogic">
			<ref local="LogicCustomerBId" />
		</property>
	</bean>

	<bean name="/SearchAction" class="bookstore.action.SearchAction">
		<property name="bookLogic">
			<ref local="LogicBookBId" />
		</property>
	</bean>

	<bean name="/Logout" class="bookstore.action.LogoutAction">
	</bean>

	<!-- Servlet Layer Implement -->
	<!-- ServletはSpringで生成されないため、Servletにautowiredを使用するのは無理 -->
	<!-- 
	<bean name="/bookstore/LoginServlet" class="bookstore.servlet.LoginServlet">
		<property name="customerLogic">
			<ref local="LogicCustomerImplBId" />
		</property>
		<property name="bookLogic">
			<ref local="LogicBookImplBId" />
		</property>
	</bean>
	 -->

</beans>
