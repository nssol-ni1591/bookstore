<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:annotation-config />
	<!-- TXモードにannotationを使用していない
		このファイルのLogic層のbean定義に記載している
	<tx:annotation-driven />
	 -->
	<tx:annotation-driven proxy-target-class="true" />

	<!-- spring DI対象のパッケージのみを指定する -->
	<context:component-scan base-package="bookstore.dao.hibernate.*" />
	<context:component-scan base-package="bookstore.logic.spring.*" />

	<bean id="logger" class="bookstore.util.LogInjection" />

	<!-- SessionFactory -->
	<bean id="sessionFactory"
			class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="configLocation">
			<value>/WEB-INF/hibernate.cfg.xml</value>
		</property>
	</bean>


	<!-- TransactionManager -->
<!-- 
Springのトランザクション管理は大きく分けて以下の2つの管理方法が存在する。

1.プログラミングによるトランザクション管理
以下のようなイメージでトランザクション制御コードをソースコード内に記述する。

transactionManager.begin();
transactionManager.commit();
transactionManager.rollback();

2.宣言的トランザクション管理
「あるメソッドを呼び出したときにトランザクションをかける」と宣言する方法。
メソッドやクラスに@Transactionalアノテーションを付与することで管理され、
トランザクションの開始、コミット、ロールバックは自動で行われる。
ただし、ロールバックの注意点として、
非検査例外(RuntimeException及びそのサブクラス)が発生した場合はロールバックされるが、
検査例外(Exception及びそのサブクラスでRuntimeExceptionのサブクラスじゃないもの)が
発生した場合はロールバックされずコミットされる。
 -->
	<!-- Transaction Manager -->
 	<bean id="transactionManager"
			class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>
 <!-- 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.apache.derby.jdbc.ClientDriver" />
		<property name="url" value="jdbc:derby://localhost:1527/bookstore"></property>
		<property name="username" value="bookstore"></property>
		<property name="password" value="bookstore"></property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource"><ref local="dataSource"/></property>
	</bean>
  -->


	<!-- DAO -->
	<!-- Logic層でトランザクションを開始しているのでDAOにトランザクション定義が必要か？ -->
	<!-- targetの参照先はbean定義ファイル内で完結してしないといけない。ようだ -->
	<bean id="BookDAOBId" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
		<!-- 
			<ref local="BookDAOImplBId" />
		 -->
			<ref bean="BookDAOImplBId" />
		</property>
	</bean>

	<bean id="CustomerDAOBId" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref local="CustomerDAOImplBId" />
		</property>
	</bean>

	<bean id="OrderDAOBId" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref local="OrderDAOImplBId" />
		</property>
	</bean>

	<bean id="OrderDetailDAOBId" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref local="OrderDetailDAOImplBId" />
		</property>
	</bean>

	
	<!-- 
	<bean id="BookDAOBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="target">
			<ref local="BookDAOImplBId" />
		</property>

		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="retrieve*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>

	</bean>

	<bean id="CustomerDAOBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="target">
			<ref local="CustomerDAOImplBId" />
		</property>

		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>

	</bean>

	<bean id="OrderDAOBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="target">
			<ref local="OrderDAOImplBId" />
		</property>

		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="create*">PROPAGATION_REQUIRED</prop>
				<prop key="retrieve*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>

	</bean>

	<bean id="OrderDetailDAOBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="target">
			<ref local="OrderDetailDAOImplBId" />
		</property>

		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="create*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>

	</bean>
	 -->

	<!-- DAOImpl -->
	<!-- この定義を省略するとsessionFactoryをautowiredできなかった -->
	<!-- sessionFactoryはsuperクラスのHibernateDaoSupportがHibernateTemplateを生成するために必要
		別にsuperクラスを使用しなくても、sessionFactoryがあればHibernateTemplateを生成できるので
		HibernateDaoSupportの継承をやめて、PojoクラスでautowiredしたsessionFactoryから
		HibernateDaoSupportを生成するようにする
	 -->
	<!-- これにより、以下のsessionFactoryのDI定義は必要なくなった -->
	<bean id="BookDAOImplBId" class="bookstore.dao.hibernate.BookDAOImpl">
		<!-- 
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
		 -->
	</bean>
	<bean id="CustomerDAOImplBId" class="bookstore.dao.hibernate.CustomerDAOImpl">
		<!-- 
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
		 -->
	</bean>
	<bean id="OrderDAOImplBId" class="bookstore.dao.hibernate.OrderDAOImpl">
		<!-- 
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
		 -->
	</bean>
	<bean id="OrderDetailDAOImplBId" class="bookstore.dao.hibernate.OrderDetailDAOImpl">
		<!-- 
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
		 -->
	</bean>

	<!-- Logic Layer -->
	<bean id="LogicBookBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="target">
			<ref local="LogicBookImplBId" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="create*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="retrieve*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<bean id="LogicCustomerBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="target">
			<ref local="LogicCustomerImplBId" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="is*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="createCustomer">PROPAGATION_REQUIRED</prop>
				<prop key="createVCustomer">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>
<!-- 
 	<bean id="LogicOrderBId"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref local="transactionManager" />
		</property>
		<property name="target">
			<ref local="LogicOrderImplBId" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="orderBooks">PROPAGATION_REQUIRED</prop>
				<prop key="list*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>
 -->

	<bean id="LogicOrderBId" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<ref local="LogicOrderImplBId" />
		</property>
	</bean>

 
	<!-- Logic Layer Implement -->
	<!-- autowired設定によりコメントアウト化ができる部分 -->
	<!-- しかし、CDIと混在させる場合、@NameはSpringが優先されためCDIで処理されない
		このため、CDIと混在させるためにはspringによるAnnotation（<component-scan ...>）を無効にする 
		よって、以下のbean定義を有効化する必要が生じる
	 -->
	<bean id="LogicCustomerImplBId" class="bookstore.logic.spring.CustomerLogicWrapper">
	<!-- クラスに@Autowiredが指定されているのでapplicationContext.xmlでの指定は不要
		<property name="customerdao">
			<ref local="CustomerDAOBId" />
		</property>
	 -->
	</bean>

	<bean id="LogicBookImplBId" class="bookstore.logic.spring.BookLogicWrapper">
	<!-- クラスに@Autowiredが指定されているのでapplicationContext.xmlでの指定は不要
		<property name="bookdao">
			<ref local="BookDAOBId" />
		</property>
	 -->
	</bean>

	<bean id="LogicOrderImplBId" class="bookstore.logic.spring.OrderLogicWrapper">
	<!-- クラスに@Autowiredが指定されているのでapplicationContext.xmlでの指定は不要
		<property name="bookdao">
			<ref local="BookDAOBId" />
		</property>
		<property name="customerdao">
			<ref local="CustomerDAOBId" />
		</property>
		<property name="orderdao">
			<ref local="OrderDAOBId" />
		</property>
		<property name="orderdetaildao">
			<ref local="OrderDetailDAOBId" />
		</property>
	 -->
	</bean>


	<!-- Struts Action Layer -->
	<!-- この層ではDIをxmlファイルの定義で行う -->
	<bean name="/CreateUser" class="bookstore.action.CreateUserAction">
		<property name="customerLogic">
			<ref local="LogicCustomerImplBId" />
		</property>
	</bean>

	<bean name="/Login" class="bookstore.action.LoginAction">
		<property name="customerLogic">
			<ref local="LogicCustomerImplBId" />
		</property>
		<property name="bookLogic">
			<ref local="LogicBookImplBId" />
		</property>
	</bean>

	<bean name="/AddToCartAction" class="bookstore.action.AddToCartAction">
		<property name="bookLogic">
			<ref local="LogicBookImplBId" />
		</property>
	</bean>

	<bean name="/CheckoutAction" class="bookstore.action.CheckoutAction">
		<property name="bookLogic">
			<ref local="LogicBookImplBId" />
		</property>
	</bean>

	<bean name="/OrderAction" class="bookstore.action.OrderAction">
		<property name="orderLogic">
			<ref local="LogicOrderImplBId" />
		</property>
		<property name="customerLogic">
			<ref local="LogicCustomerImplBId" />
		</property>
	</bean>

	<bean name="/SearchAction" class="bookstore.action.SearchAction">
		<property name="bookLogic">
			<ref local="LogicBookImplBId" />
		</property>
	</bean>

	<bean name="/Logout" class="bookstore.action.LogoutAction">
	</bean>

	<!-- Servlet Layer Implement -->
	<!-- ServletはSpringで生成されないため、Servletにautowiredを使用するのは無理 -->
	<!-- 
	<bean name="/bookstore/LoginServlet" class="bookstore.servlet.LoginServlet">
		<property name="customerLogic">
			<ref local="LogicCustomerImplBId" />
		</property>
		<property name="bookLogic">
			<ref local="LogicBookImplBId" />
		</property>
	</bean>
	 -->

</beans>
